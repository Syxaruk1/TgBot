from aiogram import F, Router
from aiogram.filters import CommandStart
from aiogram.types import Message
import sys
import os
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from Database.database import Database
from Bot.keyboards import keyboard, get_number
from Bot.status import Clients
from aiogram.fsm.context import FSMContext
from aiogram import types
from datetime import datetime, timedelta, timezone



db = Database()  # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ Database
router = Router()  # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ Router

@router.message(CommandStart())
async def cmd_start(message: Message):
    """–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã start.

    –í—ã–≤–æ–¥–∏—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–µ—Ç Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏.
    """
    await message.answer(f"üåü –ü—Ä–∏–≤–µ—Ç! –†–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å! —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ó–∞–ø–∏—Å—å'", reply_markup=keyboard)

@router.message(F.text == '–ó–∞–ø–∏—Å—å')
async def register(message: Message, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.

    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ '–ó–∞–ø–∏—Å—å' –∏–ª–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ '–ó–∞–ø–∏—Å—å'.
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å Clients.name –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """    
    await state.set_state(Clients.name)
    await message.answer('üòä –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:')

@router.message(Clients.name)
async def register_name(message: Message, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏.

    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∏–º—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å Clients.NumberPhone –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞.
    """
    await state.update_data(name=message.text)
    await state.set_state(Clients.NumberPhone)
    await message.answer("üìû –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=get_number)

@router.message(Clients.NumberPhone)
async def register_numberPhone(message: Message, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.

    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –ø—É—Å—Ç–æ—Ç—É –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å.
    –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–º–µ—Ä –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∞–¥—Ä–µ—Å.
    –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ. 
    –¢–∞–∫–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä'.
    """
    if message.text:
        if message.text.isdigit():  
            await state.update_data(numberPhone=message.text)
            await state.set_state(Clients.Address)  
            await message.answer("üè† –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å:")
        else:
            await message.reply("üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã).")
    elif message.contact:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç
        await state.update_data(numberPhone=message.contact.phone_number)
        await state.set_state(Clients.Address)  
        await message.answer("üè† –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å:")
    else:
        await message.reply("‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")

@router.message(Clients.Address)
async def register_Address(message: Message, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞.

    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –∏ –≤—ã–≤–æ–¥–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –≤–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
    –°–æ–∑–¥–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –æ—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–ø–∏—Å–∏.
    """
    await state.update_data(Address=message.text)
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    
    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(f'üéâ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n–ò–º—è: {data["name"]}\n–ù–æ–º–µ—Ä: {data["numberPhone"]}\n–ê–¥—Ä–µ—Å: {data["Address"]}')
    
    # –°–æ–æ–±—â–∞–µ–º –æ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await message.answer(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –∑–∞–ø–∏—Å—å, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É!", reply_markup=keyboard)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db.set_query(message.from_user.id, data["name"], data["numberPhone"], data["Address"])
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–ø–∏—Å–∏
    await state.clear()

@router.message(F.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
async def get_information(message: Message):
    user_id = message.from_user.id
    user_info = db.get_query(int(user_id))

    if user_info is None:
        await message.answer(f"üòî –í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É!")
    else:
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∑–∞–ø–∏—Å—è–º –≤ user_info
        for record in user_info:
            name, phone, address, date = record  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∫–∞–∂–¥–∞—è –∑–∞–ø–∏—Å—å - —ç—Ç–æ –∫–æ—Ä—Ç–µ–∂ –∏–∑ 4 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            
            await message.answer(
                f"–ò–º—è: {name}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: +{phone}\n"
                f"–ê–¥—Ä–µ—Å: {address}\n"
                f"–î–∞—Ç–∞: {date}\n"
            )

@router.message(F.text == '–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã')
async def show_available_slots(message: Message):
        slots = db.get_available_slots()
        if not slots:
            await message.answer("üòï –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤.")
            return

        keyboard = InlineKeyboardMarkup(inline_keyboard=[])

        for slot in slots:
            keyboard.inline_keyboard.append(
                [InlineKeyboardButton(
                    text=slot['TimeSlots'].strftime('%d-%m-%Y %H:%M'),
                    callback_data=f"slot_{slot['id']}"
                )]
            )
        await message.answer(f"üïí –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:", reply_markup=keyboard)

@router.callback_query(lambda c: c.data.startswith('slot_'))
async def handle_slot_selection(callback_query: types.CallbackQuery):
    slot_id = int(callback_query.data.split('_')[1])
    user_id = db.get_CurrentUser(callback_query.from_user.id)

    if db.book_slot(user_id[0], slot_id):
        await callback_query.message.answer(f"üéâ –°–ª–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω! –°–ø–∞—Å–∏–±–æ!")
    else:
        await callback_query.message.answer("üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏. –°–ª–æ—Ç –º–æ–≥ –±—ã—Ç—å –∑–∞–Ω—è—Ç.")
